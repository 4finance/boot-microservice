apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'maven-publish'

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE"
        classpath 'com.ofg:uptodate-gradle-plugin:1.6.0'
        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath "io.codearte.accurest:accurest-gradle-plugin:$accurestVersion"
        classpath 'com.blogspot.toomuchcoding:gradle-test-profiler:0.3.1'

        if (project.hasProperty("coverage")) {
            classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2'
            classpath "org.sonarqube.gradle:gradle-sonarqube-plugin:1.0"
        }
    }
}

ext {
    buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "CD-000"
}

version = project.hasProperty('project.version') ? project.getProperty('project.version') : buildNrLoc

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs += ["src/main/java"]

sourceCompatibility = '1.8'

configurations {
    all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                // To prevent an accidental usage of groovy-all.jar and groovy.jar in different versions
                // all modularized Groovy jars are replaced with groovy-all.jar by default.
                if (details.requested.group == 'org.codehaus.groovy' && details.requested.name != "groovy-all") {
                    details.useTarget("org.codehaus.groovy:groovy-all:${details.requested.version}")
                }
            }
        }
    }
}

project.gradle.projectsEvaluated {
    applicationDefaultJvmArgs = project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
}

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework:spring-context-support"
    compile "org.codehaus.groovy:groovy-all"
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile 'com.google.guava:guava:18.0'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.tomcat.embed:tomcat-embed-el'
    compile 'com.jayway.jsonpath:json-path-assert:0.9.1'
    compile 'org.yaml:snakeyaml'
    compile 'org.hibernate:hibernate-validator'
    compile "org.aspectj:aspectjrt"
    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile 'net.sf.ehcache:ehcache:2.10.0.0.26'
    compile "com.ofg:micro-infra-spring-boot-starter:$microInfraSpringVersion"

    runtime 'cglib:cglib-nodep:3.1'
    runtime 'org.objenesis:objenesis:2.2'
    runtime 'org.aspectj:aspectjweaver'
    runtime 'com.h2database:h2'

    testCompile 'com.jayway.awaitility:awaitility:1.6.3'
    compile('com.github.tomakehurst:wiremock:1.57') {
        exclude group: 'org.mortbay.jetty', module: 'servlet-api'
    }
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "com.ofg:micro-infra-spring-test:$microInfraSpringVersion"

    testCompile "org.gebish:geb-core:$gebVersion"
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile "org.spockframework:spock-spring"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-htmlunit-driver:$seleniumVersion"
    testCompile "com.jayway.restassured:rest-assured:$restAssuredVersion"
    testCompile "com.jayway.restassured:spring-mock-mvc:$restAssuredVersion"
    testCompile "io.codearte.accurest:accurest-core:$accurestVersion"
}

wrapper {
    gradleVersion '2.6'
}

task bootRunDev(type: org.springframework.boot.gradle.run.BootRunTask) {
	group = 'Application'
	doFirst() {
		main = project.mainClassName
		classpath = sourceSets.main.runtimeClasspath
		systemProperty 'APP_ENV', 'dev'
		systemProperty 'CONFIG_FOLDER', 'properties'
		systemProperty 'spring.profiles.active', 'dev'
	}
}

apply from: 'gradle/cli.gradle'
apply from: 'gradle/test.gradle'
apply from: 'gradle/misc.gradle'
apply from: 'gradle/release.gradle'
