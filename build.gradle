buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "http://repo.spring.io/libs-snapshot" }
        maven { url 'https://oss.sonatype.org/content/groups/public/' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.2.RELEASE"
        classpath 'com.ofg:uptodate-gradle-plugin:1.1.0'
        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath "io.codearte.accurest:accurest-gradle-plugin:$accurestVersion"

        if(project.hasProperty("coverage")) {
            classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2'
        }
    }
}

apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'maven-publish'
apply plugin: 'com.ofg.uptodate'
apply plugin: 'docker'
apply plugin: 'accurest'

ext {
    versionPrefix = "CD"
    buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "000"
    currentVersion = "${versionPrefix}-${buildNrLoc}"
    projectGroupId = 'com.ofg'

    contractsDir = file("${project.rootDir}/repository/mappings/com/ofg/twitter-places-analyzer")
    wiremockStubsOutputDirRoot = file("${project.buildDir}/production/${project.name}-stubs/")
    wiremockStubsOutputDir = new File(wiremockStubsOutputDirRoot, 'mappings/')

    //microInfraSpring and versions of other dependencies were moved to gradle.properties
}

group = projectGroupId
version = currentVersion

configurations {
    all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                // To prevent an accidental usage of groovy-all.jar and groovy.jar in different versions
                // all modularized Groovy jars are replaced with groovy-all.jar by default.
                if (details.requested.group == 'org.codehaus.groovy' && details.requested.name != "groovy-all") {
                    details.useTarget("org.codehaus.groovy:groovy-all:${details.requested.version}")
                }
            }
        }
    }
}

project.gradle.projectsEvaluated {
    applicationDefaultJvmArgs = project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
}

test {
    jvmArgs project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
    testLogging {
        exceptionFormat = 'full'
    }
    exclude '**/*UISpec.*'
}

task guiTest(type: Test) {
    include '**/*UISpec.*'

    reports.html {
        destination = file("${reporting.baseDir}/guiTests")
    }
    group = "Verification"
    description = "Runs the acceptance GUI tests with Geb."
}

repositories {
    mavenLocal()
    jcenter()
    maven {
        url 'https://oss.sonatype.org/content/groups/public/'
    }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework:spring-context-support"
    compile "org.codehaus.groovy:groovy-all"
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonMapper"
    compile "org.codehaus.jackson:jackson-core-asl:$jacksonMapper"
    compile 'com.google.guava:guava:18.0'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.tomcat.embed:tomcat-embed-el'
    compile 'com.jayway.jsonpath:json-path-assert:1.2.0'
    compile 'org.yaml:snakeyaml'
    compile 'org.hibernate:hibernate-validator'
    compile "org.aspectj:aspectjrt"
    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile 'net.sf.ehcache:ehcache:2.9.0'
    compile ("com.ofg:micro-infra-spring-boot-starter:$microInfraSpringVersion") {
        exclude module: 'micro-infra-spring-config'
    }

    runtime 'cglib:cglib-nodep:3.1'
    runtime 'org.objenesis:objenesis:2.1'
    runtime 'org.aspectj:aspectjweaver'
    runtime 'com.h2database:h2'

    testCompile 'com.jayway.awaitility:awaitility:1.6.3'
    testCompile('com.github.tomakehurst:wiremock:1.53') {
        exclude group: 'org.mortbay.jetty', module: 'servlet-api'
    }
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "com.ofg:micro-infra-spring-test:$microInfraSpringVersion"

    testCompile "org.gebish:geb-core:$gebVersion"
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile "org.spockframework:spock-spring"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-htmlunit-driver:$seleniumVersion"
    testCompile "com.jayway.restassured:rest-assured:$restAssuredVersion"
    testCompile "com.jayway.restassured:spring-mock-mvc:$restAssuredVersion"
    testCompile "io.codearte.accurest:accurest-core:$accurestVersion"
}

task docker(type: Docker) {
    dependsOn 'build'
    dryRun true
    addFile("build/libs/${project.name}.jar", "/${project.name}/${project.name}.jar")
    exposePort(8095)
    entryPoint(['java', '-jar', "/${project.name}/${project.name}.jar"])
}

if(project.hasProperty("coverage")) {
    apply plugin: 'codenarc'
    apply plugin: 'jacoco'
    apply plugin: 'sonar-runner'
    apply plugin: 'com.github.kt3k.coveralls'

    jacoco {
        toolVersion = "0.7.0.201403182114"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }

    codenarc {
        configFile = file('config/codenarc/rules.groovy')
        maxPriority1Violations = 0
        maxPriority2Violations = 6
        maxPriority3Violations = 10
        reportFormat = 'xml'
        ignoreFailures = true
    }

    dependencies {
        codenarc 'org.codenarc:CodeNarc:0.21'
    }

    test {
        jacoco {
            excludes = ['*Configuration']
        }
    }

    sonarRunner {
        sonarProperties {
            //TODO: fill this
            property "sonar.host.url", ""
            property "sonar.junit.reportsPath", "build/test-results"
        }
    }
}

accurest {
    baseClassForTests = 'com.ofg.twitter.places.accurest.BaseMockMvcSpec'
    basePackageForTests = 'accurest'
    contractsDslDir = contractsDir
    generatedTestSourcesDir = file("${project.buildDir}/generated-sources/accurest")
    stubsOutputDir = wiremockStubsOutputDir
}

test.dependsOn { generateAccurest } //See: https://github.com/Codearte/accurest/issues/36

task addHashFile << {
    String gitCmd = "git log --pretty=format:'%H' -n 1"
    def proc = gitCmd.execute()
    proc.waitFor()
    new File("commitHash.txt").withWriter { it << proc.in.text }
}

jar {
    dependsOn addHashFile
    from "commitHash.txt"
}

task stubsJar(type: Jar, dependsOn: ["generateWiremockClientStubs", "addHashFile"]) {
    baseName = "${project.name}-stubs"
    from wiremockStubsOutputDirRoot
    from "commitHash.txt"
}

bootRepackage {
    withJarTask = "jar"
}

//Make sure that fat jar is built before uploading
project.tasks.findAll { it.name.startsWith('publish') || it.name == 'bintrayUpload' }*.dependsOn { bootRepackage }

artifacts {
    archives stubsJar
}

publishing {
    repositories {
        maven {
            url getProperty('mavenRepoUrl')
            credentials {
                username getProperty('mavenUser')
                password getProperty('mavenPassword')
            }
        }
    }
    publications {
        stubs(MavenPublication) {
            artifactId "${project.name}-stubs"
            artifact stubsJar
        }
        mavenJava(MavenPublication) {
            from components.java
            pom.withXml {
                //Remove dependencies - everything is embedded in JAR created by Spring Boot
                asNode().dependencies.replaceNode{ null }
            }
        }
    }
}

task uploadArchives(dependsOn: 'publish') {
    group "publishing"
    description "DEPRECATED - Publishes produced archives - DEPRECATED - use 'publish' task"
    doFirst {
        logger.warn("DEPRECATION WARNING. Task 'uploadArchives' is deprecated. Use 'publish' task instead.")
    }
}

wrapper {
    gradleVersion '2.2.1'
}
