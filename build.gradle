buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE'
        classpath 'com.toomuchcoding:uptodate-gradle-plugin:+'
        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath "io.codearte.accurest:accurest-gradle-plugin:${accurestVersion}"
        classpath 'com.blogspot.toomuchcoding:gradle-test-profiler:0.3.1'
        classpath 'gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.20'

        if (project.hasProperty('coverage')) {
            classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
            classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1'
        }
    }
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'

ext['selenium.version'] = seleniumVersion

group = mavenProjectGroupId
version = findProperty('currentVersion') ?: 'LOCAL'

sourceCompatibility = '1.8'

apply from: 'gradle/cli.gradle'
apply from: 'gradle/test.gradle'
apply from: 'gradle/misc.gradle'
apply from: 'gradle/release.gradle'

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework:spring-context-support'
    compile 'org.codehaus.groovy:groovy-all'
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile 'com.google.guava:guava:20.0'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.tomcat.embed:tomcat-embed-el'
    compile 'com.jayway.jsonpath:json-path-assert:2.2.0'
    compile 'org.yaml:snakeyaml'
    compile 'org.hibernate:hibernate-validator'
    compile 'org.aspectj:aspectjrt'
    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile 'net.sf.ehcache:ehcache'
    compile "com.ofg:micro-infra-spring-boot-starter:${microInfraSpringVersion}"
    compile "com.ofg:activity-tracker:${microInfraSpringVersion}"
    compile "com.ofg:activity-tracker-boot-starter:${microInfraSpringVersion}"
    compile 'com.github.tomakehurst:wiremock:2.6.0'

    runtime 'cglib:cglib-nodep:3.2.3'
    runtime 'org.objenesis:objenesis:2.4'
    runtime 'org.aspectj:aspectjweaver'
    runtime 'com.h2database:h2'

    testCompile 'com.jayway.awaitility:awaitility:1.7.0'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile "com.ofg:micro-infra-spring-test:${microInfraSpringVersion}"
    testCompile "org.gebish:geb-core:${gebVersion}"
    testCompile "org.gebish:geb-spock:${gebVersion}"
    testCompile 'org.spockframework:spock-spring'
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:${seleniumVersion}"
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:${seleniumVersion}"
    testCompile "org.seleniumhq.selenium:selenium-support:${seleniumVersion}"
    testCompile "com.jayway.restassured:rest-assured:${restAssuredVersion}"
    testCompile "com.jayway.restassured:spring-mock-mvc:${restAssuredVersion}"

    // for easier contract development - ide auto-completion support
    testCompileOnly "io.codearte.accurest:accurest-core:${accurestVersion}"
}

bootRun {
    description = "Starts application with dev profile, use task rule 'bootRun<Profiles>' to change profile"

    systemProperty 'CONFIG_FOLDER', environment['CONFIG_FOLDER']
    systemProperty 'APP_ENV', environment['APP_ENV'] ?: 'dev'
    systemProperty 'server.port', findProperty('server.port') ?: defaultApplicationPort
    systemProperty 'spring.profiles.active', findProperty('spring.profiles.active') ?: 'dev,springCloud'
    systemProperties System.properties as Map<String, ?> // Allows to pass command-line properties (using -D switch)

    doFirst {
        if (!systemProperties['CONFIG_FOLDER']) {
            logger.error('CONFIG_FOLDER system variable not defined. Please set it in the system or pass via -D switch.')
        }
    }
}

tasks.addRule("Pattern: bootRun<Profiles>: Starts application with given comma separated profiles, eg. 'bootRunProd', 'bootRunProd,smokeTests'") { String taskName ->
    if (taskName.startsWith('bootRun')) {
        task(taskName) {
            bootRun.systemProperty 'spring.profiles.active', (taskName - 'bootRun').uncapitalize()
            finalizedBy bootRun
        }
    }
}
