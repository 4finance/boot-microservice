buildscript {
    ext {
        springBootVersion = "1.2.1.RELEASE"
    }
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "http://repo.spring.io/libs-snapshot" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'com.ofg:uptodate-gradle-plugin:1.1.0'
        classpath 'se.transmode.gradle:gradle-docker:1.2'

        if(project.hasProperty("coverage")) {
            classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2'
        }
    }
}

apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: 'com.ofg.uptodate'
apply plugin: 'docker'

ext {
    versionPrefix = "CD"
    buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "000"
    currentVersion = "${versionPrefix}-${buildNrLoc}"

    //microInfraSpring version moved to gradle.properties
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: "http://nexus.4finance.net/content/repositories/Pipeline") {
            authentication(userName: '', password: '')
        }
        pom {
            version = currentVersion
            artifactId = project.name
            groupId = 'com.ofg'
            project {
                parent {
                    groupId "org.springframework.boot"
                    artifactId "spring-boot-starter-parent"
                    version springBootVersion
                }
            }
        }
    }
}

// Make sure that fat jar is built before uploading
uploadArchives.dependsOn build

task addHashFile << {
    String gitCmd = "git log --pretty=format:'%H' -n 1"
    def proc = gitCmd.execute()
    proc.waitFor()
    new File("commitHash.txt").withWriter { it << proc.in.text }
}

jar {
    dependsOn addHashFile
    from "commitHash.txt"
}

project.gradle.projectsEvaluated {
    applicationDefaultJvmArgs = project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
}

test {
    jvmArgs project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
    testLogging {
        exceptionFormat = 'full'
    }
}

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework:spring-context-support"
    compile "org.codehaus.groovy:groovy-all"
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonMapper"
    compile "org.codehaus.jackson:jackson-core-asl:$jacksonMapper"
    compile 'com.google.guava:guava:18.0'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.tomcat.embed:tomcat-embed-el'
    compile 'com.jayway.jsonpath:json-path-assert:1.2.0'
    compile 'org.yaml:snakeyaml'
    compile 'org.hibernate:hibernate-validator'
    compile "org.aspectj:aspectjrt"
    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile 'net.sf.ehcache:ehcache:2.9.0'
    compile ("com.ofg:micro-infra-spring-boot-starter:$microInfraSpringVersion") {
        exclude module: 'micro-infra-spring-config'
    }

    runtime 'cglib:cglib-nodep:3.1'
    runtime 'org.objenesis:objenesis:2.1'
    runtime 'org.aspectj:aspectjweaver'
    runtime 'com.h2database:h2'

    testCompile 'com.jayway.awaitility:awaitility:1.6.3'
    testCompile('com.github.tomakehurst:wiremock:1.52') {
        exclude group: 'org.mortbay.jetty', module: 'servlet-api'
    }
    testCompile "com.ofg:micro-infra-spring-test:$microInfraSpringVersion"

    testCompile "org.gebish:geb-core:$gebVersion"
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile "org.spockframework:spock-spring"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-htmlunit-driver:$seleniumVersion"

}

task docker(type: Docker) {
    dependsOn 'build'
    dryRun true
    addFile("build/libs/${project.name}.jar", "/${project.name}/${project.name}.jar")
    exposePort(8095)
    entryPoint(['java', '-jar', "/${project.name}/${project.name}.jar"])
}

if(project.hasProperty("coverage")) {
    apply plugin: 'codenarc'
    apply plugin: 'jacoco'
    apply plugin: 'sonar-runner'
    apply plugin: 'com.github.kt3k.coveralls'

    jacoco {
        toolVersion = "0.7.0.201403182114"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }

    codenarc {
        configFile = file('config/codenarc/rules.groovy')
        maxPriority1Violations = 0
        maxPriority2Violations = 6
        maxPriority3Violations = 10
        reportFormat = 'xml'
        ignoreFailures = true
    }

    dependencies {
        codenarc 'org.codenarc:CodeNarc:0.21'
    }

    test {
        jacoco {
            excludes = ['*Configuration']
        }
    }

    sonarRunner {
        sonarProperties {
            //TODO: fill this
            property "sonar.host.url", ""
            property "sonar.junit.reportsPath", "build/test-results"
        }
    }
}

wrapper {
    gradleVersion '2.2.1'
}
