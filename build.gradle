buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "http://repo.spring.io/libs-snapshot" }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.1.8.RELEASE'
        classpath 'com.ofg:uptodate-gradle-plugin:1.1.0'

        if(project.hasProperty("coverage")) {
            classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2'
        }
    }
}

apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: 'com.ofg.uptodate'

ext {
    versionPrefix = "CD"
    buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "000"
    currentVersion = "${versionPrefix}-${buildNrLoc}"

    groovyVersion = '2.3.7'
    spockVersion = '0.7-groovy-2.0'
    springBootVersion = '1.1.8.RELEASE'
    springVersion = '4.1.1.RELEASE'
    jacksonMapper = '1.9.13'
    aspectjVersion = '1.8.3'
    microInfraSpringVersion = '0.7.1-SNAPSHOT'
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: "http://nexus.4finance.net/content/repositories/Pipeline") {
            authentication(userName: '', password: '')
        }
        pom.version = currentVersion
        pom.artifactId = project.name
        pom.groupId = 'com.ofg'
    }
}

// Make sure that fat jar is built before uploading
uploadArchives.dependsOn build

task addHashFile << {
    String gitCmd = "git log --pretty=format:'%H' -n 1"
    def proc = gitCmd.execute()
    proc.waitFor()
    new File("commitHash.txt").withWriter { it << proc.in.text }
}

jar {
    dependsOn addHashFile
    from "commitHash.txt"
}

project.gradle.projectsEvaluated {
    applicationDefaultJvmArgs = project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
}

//Workaround for the issue with Java 8u11 and 7u65 - http://www.infoq.com/news/2014/08/Java8-U11-Broke-Tools
test {
    jvmArgs '-noverify'
}

applicationDefaultJvmArgs << "-noverify"

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    compile "org.springframework:spring-context-support:$springVersion"
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.3'
    compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonMapper"
    compile "org.codehaus.jackson:jackson-core-asl:$jacksonMapper"
    compile 'com.google.guava:guava:18.0'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.tomcat.embed:tomcat-embed-el:8.0.14'
    compile 'com.jayway.jsonpath:json-path-assert:1.1.0'
    compile 'org.yaml:snakeyaml:1.14'
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'org.hibernate:hibernate-validator:5.1.3.Final'
    compile "org.aspectj:aspectjrt:$aspectjVersion"
    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile 'net.sf.ehcache:ehcache:2.9.0'
    compile "com.ofg:micro-infra-spring-boot-starter:$microInfraSpringVersion"

    runtime 'cglib:cglib-nodep:3.1'
    runtime 'org.objenesis:objenesis:2.1'
    runtime 'org.aspectj:aspectjweaver:1.8.3'
    runtime 'com.h2database:h2:1.4.182'

    testCompile 'junit:junit:4.11'
    testCompile 'com.jayway.awaitility:awaitility:1.6.2'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile "org.spockframework:spock-core:$spockVersion"
    testRuntime "org.spockframework:spock-spring:$spockVersion"
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile 'com.github.tomakehurst:wiremock:1.51'
    testCompile "com.ofg:micro-infra-spring-test:$microInfraSpringVersion"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

if(project.hasProperty("coverage")) {
    apply plugin: 'codenarc'
    apply plugin: 'jacoco'
    apply plugin: 'sonar-runner'
    apply plugin: 'com.github.kt3k.coveralls'

    jacoco {
        toolVersion = "0.7.0.201403182114"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }

    codenarc {
        configFile = file('config/codenarc/rules.groovy')
        maxPriority1Violations = 0
        maxPriority2Violations = 6
        maxPriority3Violations = 10
        reportFormat = 'xml'
        ignoreFailures = true
    }

    dependencies {
        codenarc 'org.codenarc:CodeNarc:0.21'
    }

    test {
        ignoreFailures = true
        jacoco {
            excludes = ['*Configuration']
        }
    }

    sonarRunner {
        sonarProperties {
            //TODO: fill this
            property "sonar.host.url", ""
            property "sonar.junit.reportsPath", "build/test-results"
        }
    }
}
