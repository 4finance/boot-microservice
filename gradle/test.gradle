apply plugin: 'com.blogspot.toomuchcoding.testprofiler'
apply plugin: 'accurest'

ext {
    contractsDir = file("${project.rootDir}/$accurestRoot")
    wiremockStubsOutputDirRoot = file("${project.buildDir}/production/${project.name}-stubs/")
    wiremockStubsOutputDir = new File(wiremockStubsOutputDirRoot, 'mappings/')
}

test {
    jvmArgs = project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"} + ['-Xmx512m']
    testLogging {
        exceptionFormat = 'full'
    }
    exclude '**/*UISpec.*'
}

task guiTest(type: Test) {
    jvmArgs project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
    testLogging {
        exceptionFormat = 'full'
    }
    include '**/*UISpec.*'

    reports.html {
        destination = file("${reporting.baseDir}/guiTests")
    }
    group = "Verification"
    description = "Runs the acceptance GUI tests with Geb."
}


if (project.hasProperty("coverage")) {
    apply plugin: 'codenarc'
    apply plugin: 'jacoco'
    apply plugin: 'sonar-runner'
    apply plugin: 'com.github.kt3k.coveralls'

    jacoco {
        toolVersion = '0.7.4.201502262128'
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }

    codenarc {
        configFile = file('config/codenarc/rules.groovy')
        maxPriority1Violations = 0
        maxPriority2Violations = 6
        maxPriority3Violations = 10
        reportFormat = 'xml'
        ignoreFailures = true
    }

    dependencies {
        codenarc 'org.codenarc:CodeNarc:0.21'
    }

    test {
        jacoco {
            excludes = ['*Configuration']
        }
    }

    sonarRunner {
        sonarProperties {
            //TODO: fill this
            property "sonar.host.url", ""
            property "sonar.junit.reportsPath", "build/test-results"
        }
    }
}

testprofiler {
    minTestThreshold = 100

    buildBreaker {
        maxTestThreshold = project.hasProperty('maxTestThreshold') ? project.property('maxTestThreshold') : 30_000
        ifTestsExceedMaxThreshold {
            displayWarning()
        }
    }
}

accurest {
    baseClassForTests = accurestBaseClass
    basePackageForTests = 'accurest'
    contractsDslDir = contractsDir
    generatedTestSourcesDir = file("${project.buildDir}/generated-sources/accurest-server-side-tests")
    stubsOutputDir = wiremockStubsOutputDir
}

test.dependsOn { generateAccurest } //See: https://github.com/Codearte/accurest/issues/36